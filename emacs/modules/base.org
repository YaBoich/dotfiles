#+title: Runtime paths, Package management, Vim Hotkeys, and Interface Config.
#+author: Charlie Verwer
#+date: 09/10/2023

* Package Management

The absolute minimum required to handle package management. `use-package' macro
comes with Emacs 29!

#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
			   ("nongnu" . "https://elpa.nongnu.org/nongnu/")
			   ("melpa" . "https://melpa.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

* Vim Keybindings

#+begin_src emacs-lisp
  (use-package evil
    :demand
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)

    :config
    (evil-mode 1)

    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)
    (define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-up)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :demand
    :after evil
    :config
    (evil-collection-init))

  (use-package undo-tree
    :demand
    :config
    (global-undo-tree-mode 1)
    (when (featurep 'evil)
      (evil-set-undo-system 'undo-tree)))
#+end_src

** Visual Select Support for Org Src Blocks

This makes *vi#* and *va#* select in and around org source blocks, respectively.

#+begin_src emacs-lisp
  (evil-define-text-object evil-org-inner-src-block (count &optional beg end type)
    "Select the contents of an org src block."
    (ignore count)
    (let* ((block-begin-re "#\\+begin_src.*$")
           (block-end-re "#\\+end_src.*$")
           (cur-pos (point))
           block-beg-pos block-end-pos)
      ;; search backward for block-begin
      (save-excursion
        (if (re-search-backward block-begin-re nil t)
            (setq block-beg-pos (match-end 0))
          (error "Not inside an org src block")))
      ;; search forward for block-end
      (save-excursion
        (if (re-search-forward block-end-re nil t)
            (setq block-end-pos (match-beginning 0))
          (error "Not inside an org src block")))
      (if (and block-beg-pos block-end-pos
               (> cur-pos block-beg-pos)
               (< cur-pos block-end-pos))
          (evil-range (1+ block-beg-pos) block-end-pos)
        (error "Not inside an org src block"))))

  (define-key evil-inner-text-objects-map "#" 'evil-org-inner-src-block)

  (evil-define-text-object evil-org-outer-src-block (count &optional beg end type)
    "Select an entire org src block including delimiters."
    (ignore count)
    (let* ((block-begin-re "#\\+begin_src.*$")
           (block-end-re "#\\+end_src.*$")
           (cur-pos (point))
           block-beg-pos block-end-pos)
      ;; search backward for block-begin
      (save-excursion
        (if (re-search-backward block-begin-re nil t)
            (setq block-beg-pos (match-beginning 0))
          (error "Not inside an org src block")))
      ;; search forward for block-end
      (save-excursion
        (if (re-search-forward block-end-re nil t)
            (setq block-end-pos (match-end 0))
          (error "Not inside an org src block")))
      (if (and block-beg-pos block-end-pos
               (> cur-pos block-beg-pos)
               (< cur-pos block-end-pos))
          (evil-range block-beg-pos block-end-pos)
        (error "Not inside an org src block"))))

  (define-key evil-outer-text-objects-map "#" 'evil-org-outer-src-block)
#+end_src

** Help

*** Keybinds

| Keybind     | Action                                                        |
|-------------+---------------------------------------------------------------|
| C-w H/J/K/L | Move window                                                   |
| C-g         | ESC in INSERT mode                                            |
| C-h         | Backspace in INSERT mode                                      |
| z-a         | Toggle fold that cursor is within                             |
| vi#         | Select inside org src block                                   |
| va#         | Select around org src block                                   |
| C-M-\       | Indent-region (select src block 'vi#' then auto indent C-M-\) |
|-------------+---------------------------------------------------------------|

*** Delete without copying to the clipboard
Yo about deleting! The default Emacs binding for M-d (alt d) is to kill-word. If
you select in vim, then M-d - it deletes the selection without overiding your clipboard.
(So basically I was trying to rebind over something that already existed. Albeit
without the ability to work it into a motion..)

Registers. I've tried setting a binding, like M-d to "_d, which would delete
into the null register. But it aint working.

So... Just get used to the idea. Do something like "1d to delete into the 1st
register. Then delete all over the place and when you replace something, do it
with "1p - easy enough.

* Interface

** Basics

If the right side of doom modeline is cut off: [[https://github.com/doomemacs/doomemacs/blob/develop/modules/ui/modeline/README.org#the-right-side-of-the-modeline-is-cut-off][link]]

#+begin_src emacs-lisp
  (defgroup boich/interface nil
    "Customization group for Boich Emacs Interface variables."
    :prefix "boich-interface/"
    :group 'boich)

  (setq inhibit-startup-message t)
  (setq visible-bell t)   ; Rather than the constant pinging noise
  (scroll-bar-mode -1)    ; Disable the visible scrollbar
  (tool-bar-mode -1)      ; Disable the toolbar
  (tooltip-mode -1)       ; Disable tooltips
  (set-fringe-mode 20)    ; Gives some breathing room
  (menu-bar-mode -1)      ; Disable the menu bar

  (setq scroll-margin 10) ; Maintain lines below and above cursor
  ;; (pixel-scroll-mode 0)
  ;; (setq scroll-step 1)

  ;; THEMES:
  ;; - Using my own theme for now - don't need a million options.
  ;;
  ;; (use-package doom-themes
  ;;  :config (load-theme 'doom-gruvbox t)) ;; or doom-one
  (add-to-list 'custom-theme-load-path (expand-file-name "themes/" user-emacs-directory))
  (load-theme 'doom-gruvbox t)


  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :custom
    (doom-modeline-height 15 "set the height")
    (column-number-mode 1)
    (doom-modeline-battery t) ;; respects `display-battery-mode'.
    (doom-modeline-time t)    ;; respects `display-time-mode'.
    (doom-modeline-icon 1)
    :config
    (display-battery-mode 1)
    (display-time-mode 1))

  ;; To fix the modeline extending past the width of the window
  (doom-modeline-def-modeline 'main
    '(bar matches buffer-info remote-host buffer-position parrot selection-info)
    '(misc-info minor-modes checker input-method buffer-encoding
                major-mode process vcs "  ")) ; <-- added padding here

  (set-mouse-color "white")

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Font

Custom font settings per face type.

=describe-face= will give you info of the face at the cursor.
Then you can customize it and it'll list all the options.

If you're having issues where Emacs is asking you for a Font directory on
startup - it is downloading the below fonts there (such as Nerd-Icons and
All-the-Icons). You're likely on Windows and need to manually install those
fonts. Go to whatever folder you chose and double click the main font file
(likely `all-the-icons.ttf` or `NFM.ttf`) to install it.

#+begin_src emacs-lisp
  (defcustom boich/default-font-size 120
    "Default font size."
    :type 'number
    :group 'boich/interface)

  (defun boich/set-font-face (face font size &optional weight)
    "Utility function to set font face if font exists."
    (when (find-font (font-spec :name font))
      (set-face-attribute face nil :font font :height size :weight (or weight 'medium))
      t))

  (defun boich/set-regular-font ()
    "Set the regular font."
    (interactive)
    (unless (boich/set-font-face 'default "Fira Code" boich/default-font-size)
      (message "Warning: Font 'Fira Code' is not available."))
    (unless (boich/set-font-face 'fixed-pitch "Fira Code" boich/default-font-size)
      (message "Warning: Font 'Fira Code' is not available for fixed-pitch."))
    (unless (boich/set-font-face 'variable-pitch "Cantarell" boich/default-font-size 'regular)
      (message "Warning: Font 'Cantarell' is not available for variable-pitch."))
    )
  (boich/set-regular-font)

  ;; ============================================================================
  ;; Custom font settings for programming buffers
  ;;
  ;; Trying to get this working nicely and automatically per buffer was a
  ;; nightmare. So I'm just providing the functionality and I'll probably add a
  ;; toggle hotkey.
  ;; ============================================================================

  (defcustom boich/programming-font-size 100
    "Programming font size."
    :type 'number
    :group 'boich/interface)

  (defcustom boich/programming-font "Cascadia Mono"
    "Programming font."
    :type 'string
    :group 'boich/interface)

  (defun boich/set-programming-font ()
    "Set the font for programming buffers."
    (interactive)
    (boich/set-font-face 'default boich/programming-font boich/programming-font-size))

#+end_src

This looks promising for updating fonts without a restart:

#+begin_src emacs-lispy
(defun boich/update-programming-font-face ()
  "Update the programming font face to use the current value of `boich/programming-font-size`."
  (set-face-attribute 'boich/programming-font-face nil :height boich/programming-font-size))

(defcustom boich/programming-font-size 100
  "Programming font size."
  :type 'number
  :set (lambda (symbol value)
         (set-default symbol value)
         (boich/update-programming-font-face))
  :group 'boich/interface)

(defface boich/programming-font-face
  '((t :family "Cascadia Mono"))
  "Face for programming buffers.")

#+end_src

** Icons

*** all-the-icons

#+begin_src emacs-lisp
  (use-package all-the-icons)

  (defun boich/all-the-icons-ensure-fonts-installed ()
    "Ensure that all-the-icons fonts are installed."
    (unless (find-font (font-spec :name "all-the-icons"))
      (all-the-icons-install-fonts t)))

  (boich/all-the-icons-ensure-fonts-installed)
#+end_src

*** nerd-icons

#+begin_src emacs-lisp
  (use-package nerd-icons)

  (defun boich/nerd-icons-ensure-installed ()
    "Ensure that nerd-icons fonts are installed."
    (unless (find-font (font-spec :name "Symbols Nerd Font Mono"))
      (nerd-icons-install-fonts t)))

  (boich/nerd-icons-ensure-installed)
#+end_src

** Line Numbers

#+begin_src emacs-lisp
  (global-display-line-numbers-mode)
  (setq display-line-numbers-type 'relative)

  (dolist (mode '(;; org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode -1))))
#+end_src
