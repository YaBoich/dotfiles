#+title: Package management, Vim Hotkeys.
#+author: Charlie Verwer
#+date: 09/10/2023

* Package Management

The absolute minimum required to handle package management. `use-package' macro
comes with Emacs 29!

#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
			   ("nongnu" . "https://elpa.nongnu.org/nongnu/")
			   ("melpa" . "https://melpa.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

* Vim Keybindings

#+begin_src emacs-lisp
  (use-package evil
    :demand
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)

    :config
    (evil-mode 1)

    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)
    (define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-up)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :demand
    :after evil
    :config
    (evil-collection-init))

  (use-package undo-tree
    :demand
    :config
    (global-undo-tree-mode 1)
    (when (featurep 'evil)
      (evil-set-undo-system 'undo-tree)))
#+end_src

** Visual Select Support for Org Src Blocks

This makes *vi#* and *va#* select in and around org source blocks, respectively.

#+begin_src emacs-lisp
  (evil-define-text-object evil-org-inner-src-block (count &optional beg end type)
    "Select the contents of an org src block."
    (ignore count)
    (let* ((block-begin-re "#\\+begin_src.*$")
           (block-end-re "#\\+end_src.*$")
           (cur-pos (point))
           block-beg-pos block-end-pos)
      ;; search backward for block-begin
      (save-excursion
        (if (re-search-backward block-begin-re nil t)
            (setq block-beg-pos (match-end 0))
          (error "Not inside an org src block")))
      ;; search forward for block-end
      (save-excursion
        (if (re-search-forward block-end-re nil t)
            (setq block-end-pos (match-beginning 0))
          (error "Not inside an org src block")))
      (if (and block-beg-pos block-end-pos
               (> cur-pos block-beg-pos)
               (< cur-pos block-end-pos))
          (evil-range (1+ block-beg-pos) block-end-pos)
        (error "Not inside an org src block"))))

  (define-key evil-inner-text-objects-map "#" 'evil-org-inner-src-block)

  (evil-define-text-object evil-org-outer-src-block (count &optional beg end type)
    "Select an entire org src block including delimiters."
    (ignore count)
    (let* ((block-begin-re "#\\+begin_src.*$")
           (block-end-re "#\\+end_src.*$")
           (cur-pos (point))
           block-beg-pos block-end-pos)
      ;; search backward for block-begin
      (save-excursion
        (if (re-search-backward block-begin-re nil t)
            (setq block-beg-pos (match-beginning 0))
          (error "Not inside an org src block")))
      ;; search forward for block-end
      (save-excursion
        (if (re-search-forward block-end-re nil t)
            (setq block-end-pos (match-end 0))
          (error "Not inside an org src block")))
      (if (and block-beg-pos block-end-pos
               (> cur-pos block-beg-pos)
               (< cur-pos block-end-pos))
          (evil-range block-beg-pos block-end-pos)
        (error "Not inside an org src block"))))

  (define-key evil-outer-text-objects-map "#" 'evil-org-outer-src-block)
#+end_src

** Help

*** Keybinds

| Keybind     | Action                                                        |
|-------------+---------------------------------------------------------------|
| C-w H/J/K/L | Move window                                                   |
| C-g         | ESC in INSERT mode                                            |
| C-h         | Backspace in INSERT mode                                      |
| z-a         | Toggle fold that cursor is within                             |
| vi#         | Select inside org src block                                   |
| va#         | Select around org src block                                   |
| C-M-\       | Indent-region (select src block 'vi#' then auto indent C-M-\) |
|-------------+---------------------------------------------------------------|

*** Delete without copying to the clipboard
Yo about deleting! The default Emacs binding for M-d (alt d) is to kill-word. If
you select in vim, then M-d - it deletes the selection without overiding your clipboard.
(So basically I was trying to rebind over something that already existed. Albeit
without the ability to work it into a motion..)

Registers. I've tried setting a binding, like M-d to "_d, which would delete
into the null register. But it aint working.

So... Just get used to the idea. Do something like "1d to delete into the 1st
register. Then delete all over the place and when you replace something, do it
with "1p - easy enough.


* Spaces instead of Tabs

#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
#+end_src
