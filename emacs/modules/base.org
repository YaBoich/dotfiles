#+title: Runtime paths, Package management, Vim Hotkeys, and Interface Config.
#+author: Charlie Verwer
#+date: 09/10/2023

* Runtime and Generated Files and Directories

We aim to keep our Emacs folder as clean as possible, putting all our
generated runtime files and folders in a single directory. This is
really handy - if you wanted to fully reload your Emacs, for example,
you can just delete that one folder and open Emacs for what is
basically a full re-install.

Define a customization group for all path configuration.

#+begin_src emacs-lisp
  (defgroup boich/paths nil
    "Customization group for Boich Emacs Path definitions."
    :prefix "boich-paths/"
    :group 'boich)

  (defcustom boich/runtime-dir (expand-file-name "runtime/" user-emacs-directory)
    "Base directory for Emacs runetime stored files & directories."
    :type 'directory
    :group 'boich/paths)

  (defcustom boich/package-dir (expand-file-name "elpa/" boich/runtime-dir)
    "Directory for packages downloaded from package repos."
    :type 'directory
    :group 'boich/paths)
  (setq package-user-dir boich/package-dir)
  (with-eval-after-load 'package
    (setq package-gnupghome-dir (expand-file-name "gnupg" boich/package-dir)))

  (defcustom boich/custom-file (expand-file-name "custom.el" boich/runtime-dir)
    "Custom file location"
    :type 'file
    :group 'boich/paths)
  (setq custom-file boich/custom-file)

  (defcustom boich/auto-save-dir (expand-file-name "auto-saves/" boich/runtime-dir)
    "Single directory for all auto save files."
    :type 'directory
    :group 'boich/paths)
  (setq auto-save-file-name-transforms `((".*" ,boich/auto-save-dir t))) ;; auto-save files: #filename#
  (setq auto-save-list-file-prefix boich/auto-save-dir)                  ;; auto-save list: .saves-PID-HOSTNAME

  (defcustom boich/backup-dir (expand-file-name "backups/" boich/runtime-dir)
    "Directory for all backup files."
    :type 'directory
    :group 'boich/paths)
  (setq backup-directory-alist `(("." . ,boich/backup-dir)))

  (defcustom boich/transient-history-file (expand-file-name "transient/history.el" boich/runtime-dir)
    "Transient history file location."
    :type 'file
    :group 'boich/paths)
  (setq transient-history-file boich/transient-history-file)
  ;; Have to (require 'transient) to see any of these.
  ;; TODO - do other transient files when you need to (probably when you start using magit)
  ;; Just do above require and then go through the C-h v "transient-*-file"

  (defcustom boich/undo-tree-dir (expand-file-name "undo-tree/" boich/runtime-dir)
    "Directory for all undo-tree files."
    :type 'directory
    :group 'boich/paths)
  (with-eval-after-load 'undo-tree
    (setq undo-tree-history-directory-alist `(("." . ,boich/undo-tree-dir))))

  (defcustom boich/desktop-save-dir (expand-file-name "desktop/" boich/runtime-dir)
    "Directory for desktop-save-mode files"
    :type 'directory
    :group 'boich/paths)
  (make-directory boich/desktop-save-dir t)
  (setq desktop-dirname boich/desktop-save-dir)

  (defcustom boich/recentf-file (expand-file-name "recentf" boich/runtime-dir)
    "Recentf file location."
    :type 'file
    :group 'boich/paths)
  (with-eval-after-load 'recentf
    (setq recentf-save-file boich/recentf-file))

  (defcustom boich/treemacs-file (expand-file-name ".cache/treemacs-persist" boich/runtime-dir)
    "Treemacs persist file location."
    :type 'file
    :group 'boich/paths)
  (with-eval-after-load 'treemacs
    (setq treemacs-persist-file boich/treemacs-file))

  (defcustom boich/savehist-file (expand-file-name "savehist" boich/runtime-dir)
    "Savehist file location (keeping track of minibuffer history)."
    :type 'file
    :group 'boich/paths)
  (setq savehist-file boich/savehist-file)

  (defcustom boich/bookmarks-file (expand-file-name "bookmarks" boich/runtime-dir)
    "Bookmarks file loaction."
    :type 'file
    :group 'boich/paths)
  (setq bookmark-default-file boich/bookmarks-file)

  (defcustom boich/eln-cache-dir (expand-file-name "eln-cache/" boich/runtime-dir)
    "Native compilation .eln files directory."
    :type 'directory
    :group 'boich/paths)
  (setq native-comp-eln-load-path (list boich/eln-cache-dir))

#+end_src

* Package Management

The absolute minimum required to handle package management. `use-package' macro
comes with Emacs 29!

#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
			   ("nongnu" . "https://elpa.nongnu.org/nongnu/")
			   ("melpa" . "https://melpa.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

* Vim Keybindings

#+begin_src emacs-lisp
  (use-package evil
    :demand
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)

    :config
    (evil-mode 1)

    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :demand
    :after evil
    :config
    (evil-collection-init))

  (use-package undo-tree
    :demand
    :config
    (global-undo-tree-mode 1)
    (when (featurep 'evil)
      (evil-set-undo-system 'undo-tree)))
#+end_src

** Visual Select Support for Org Src Blocks

This makes *vi#* and *va#* select in and around org source blocks, respectively.

#+begin_src emacs-lisp
  (evil-define-text-object evil-org-inner-src-block (count &optional beg end type)
    "Select the contents of an org src block."
    (ignore count)
    (let* ((block-begin-re "#\\+begin_src.*$")
           (block-end-re "#\\+end_src.*$")
           (cur-pos (point))
           block-beg-pos block-end-pos)
      ;; search backward for block-begin
      (save-excursion
        (if (re-search-backward block-begin-re nil t)
            (setq block-beg-pos (match-end 0))
          (error "Not inside an org src block")))
      ;; search forward for block-end
      (save-excursion
        (if (re-search-forward block-end-re nil t)
            (setq block-end-pos (match-beginning 0))
          (error "Not inside an org src block")))
      (if (and block-beg-pos block-end-pos
               (> cur-pos block-beg-pos)
               (< cur-pos block-end-pos))
          (evil-range (1+ block-beg-pos) block-end-pos)
        (error "Not inside an org src block"))))

  (define-key evil-inner-text-objects-map "#" 'evil-org-inner-src-block)

  (evil-define-text-object evil-org-outer-src-block (count &optional beg end type)
    "Select an entire org src block including delimiters."
    (ignore count)
    (let* ((block-begin-re "#\\+begin_src.*$")
           (block-end-re "#\\+end_src.*$")
           (cur-pos (point))
           block-beg-pos block-end-pos)
      ;; search backward for block-begin
      (save-excursion
        (if (re-search-backward block-begin-re nil t)
            (setq block-beg-pos (match-beginning 0))
          (error "Not inside an org src block")))
      ;; search forward for block-end
      (save-excursion
        (if (re-search-forward block-end-re nil t)
            (setq block-end-pos (match-end 0))
          (error "Not inside an org src block")))
      (if (and block-beg-pos block-end-pos
               (> cur-pos block-beg-pos)
               (< cur-pos block-end-pos))
          (evil-range block-beg-pos block-end-pos)
        (error "Not inside an org src block"))))

  (define-key evil-outer-text-objects-map "#" 'evil-org-outer-src-block)
#+end_src

** Help

| Keybind     | Action                                                        |
|-------------+---------------------------------------------------------------|
| C-w H/J/K/L | Move window                                                   |
| C-g         | ESC in INSERT mode                                            |
| C-h         | Backspace in INSERT mode                                      |
| z-a         | Toggle fold that cursor is within                             |
| vi#         | Select inside org src block                                   |
| va#         | Select around org src block                                   |
| C-M-\       | Indent-region (select src block 'vi#' then auto indent C-M-\) |
|-------------+---------------------------------------------------------------|

* Interface

** Basics

If the right side of doom modeline is cut off: [[https://github.com/doomemacs/doomemacs/blob/develop/modules/ui/modeline/README.org#the-right-side-of-the-modeline-is-cut-off][link]]

#+begin_src emacs-lisp
  (defgroup boich/interface nil
    "Customization group for Boich Emacs Interface variables."
    :prefix "boich-interface/"
    :group 'boich)

  ;; (setq inhibit-startup-message t)
  (setq visible-bell t)   ; Rather than the constant pinging noise
  (scroll-bar-mode -1)    ; Disable the visible scrollbar
  (tool-bar-mode -1)      ; Disable the toolbar
  (tooltip-mode -1)       ; Disable tooltips
  (set-fringe-mode 20)    ; Gives some breathing room
  (menu-bar-mode -1)      ; Disable the menu bar

  (setq scroll-margin 10) ; Maintain lines below and above cursor
  ;; (pixel-scroll-mode 0)
  ;; (setq scroll-step 1)

  (use-package doom-themes
    :config (load-theme 'doom-gruvbox t)) ;; or doom-one

  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :custom
    (doom-modeline-height 15 "set the height")
    (column-number-mode 1)
    (doom-modeline-battery t) ;; respects `display-battery-mode'.
    (doom-modeline-time t)    ;; respects `display-time-mode'.
    (doom-modeline-icon 1)
    :config
    (display-battery-mode 1)
    (display-time-mode 1))

  ;; To fix the modeline extending past the width of the window
  (doom-modeline-def-modeline 'main
    '(bar matches buffer-info remote-host buffer-position parrot selection-info)
    '(misc-info minor-modes checker input-method buffer-encoding
                major-mode process vcs "  ")) ; <-- added padding here

  (set-mouse-color "white")

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Font

Custom font settings per face type.

=describe-face= will give you info of the face at the cursor.
Then you can customize it and it'll list all the options.

#+begin_src emacs-lisp
  (defcustom boich/default-font-size 130
    "Default font size."
    :type 'number
    :group 'boich/interface)

  (defun boich/set-font-face (face font size &optional weight)
    "Utility function to set font face if font exists."
    (when (find-font (font-spec :name font))
      (set-face-attribute face nil :font font :height size :weight (or weight 'medium))
      t))

  (unless (boich/set-font-face 'default "Fira Code" boich/default-font-size)
    (message "Warning: Font 'Fira Code' is not available."))

  (unless (boich/set-font-face 'fixed-pitch "Fira Code" boich/default-font-size)
    (message "Warning: Font 'Fira Code' is not available for fixed-pitch."))

  (unless (boich/set-font-face 'variable-pitch "Cantarell" boich/default-font-size 'regular)
    (message "Warning: Font 'Cantarell' is not available for variable-pitch."))
#+end_src

** Icons

*** all-the-icons

#+begin_src emacs-lisp
  (use-package all-the-icons)

  (defun boich/all-the-icons-ensure-fonts-installed ()
    "Ensure that all-the-icons fonts are installed."
    (unless (find-font (font-spec :name "all-the-icons"))
      (all-the-icons-install-fonts t)))

  (boich/all-the-icons-ensure-fonts-installed)
#+end_src

*** nerd-icons

#+begin_src emacs-lisp
  (use-package nerd-icons)

  (defun boich/nerd-icons-ensure-installed ()
    "Ensure that nerd-icons fonts are installed."
    (unless (find-font (font-spec :name "Symbols Nerd Font Mono"))
      (nerd-icons-install-fonts t)))

  (boich/nerd-icons-ensure-installed)
#+end_src

** Line Numbers

#+begin_src emacs-lisp
  (global-display-line-numbers-mode)
  (setq display-line-numbers-type 'relative)

  (dolist (mode '(;; org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode -1))))
#+end_src
