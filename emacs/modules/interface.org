#+title: Fonts, Themes, Modeline, and other Visuals.
#+author: Charlie Verwer
#+date: 01/01/2024

TODO - take the font/theme combos, like the jblow stuff, and combine them somehow.

* Basics

If the right side of doom modeline is cut off: [[https://github.com/doomemacs/doomemacs/blob/develop/modules/ui/modeline/README.org#the-right-side-of-the-modeline-is-cut-off][link]]

#+begin_src emacs-lisp
  (defgroup boich/interface nil
    "Customization group for Boich Emacs Interface variables."
    :prefix "boich-interface/"
    :group 'boich)

  (setq inhibit-startup-message t)
  (setq visible-bell t)   ; Rather than the constant pinging noise
  (scroll-bar-mode -1)    ; Disable the visible scrollbar
  (tool-bar-mode -1)      ; Disable the toolbar
  (tooltip-mode -1)       ; Disable tooltips
  ;;(set-fringe-mode 20)    ; Gives some breathing room
  (menu-bar-mode -1)      ; Disable the menu bar

  (setq scroll-margin 10) ; Maintain lines below and above cursor
  ;; (pixel-scroll-mode 0)
  ;; (setq scroll-step 1)

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

* Themes

I'm using my own themes now instead of using doom-themes. I kept 2 of them, I
just don't need a million options.

#+begin_src emacs-lisp
  ;; (use-package doom-themes
  ;;  :config (load-theme 'doom-gruvbox t)) ;; or doom-one
  (add-to-list 'custom-theme-load-path (expand-file-name "themes/" user-emacs-directory))
#+end_src

** Default Theme

#+begin_src emacs-lisp
  (defvar boich/default-mode-line-format mode-line-format)

  (defun boich/set-default-theme ()
    "Set the default theme. Reverts the changes made by the
  'boich/focus-on' function, restoring line numbers and the mode
  line for this buffer."
    (interactive)
    (load-theme 'doom-gruvbox t)
    (set-mouse-color "white")
    (set-cursor-color "white")
    (display-line-numbers-mode 1)
    (setq mode-line-format boich/default-mode-line-format))

  (boich/set-default-theme)
#+end_src

** Focused

A focused mode that removes all the distractions.

#+begin_src emacs-lisp
  (defun boich/set-focus-theme ()
    "Removes all distractions from the screen such as line numbers and
     the modeline for this buffer."
    (interactive)
    (display-line-numbers-mode 0)
    (setq mode-line-format nil))
#+end_src

** JBlow

I've been watching a bunch of Jonathan Blow's streams and it's nice to switch
over to his setup sometimes!

#+begin_src emacs-lisp
  (defun boich/set-jblow-dark-theme ()
    "JBlow's one theme that was a bit darker."
    (interactive)
    (load-theme 'jblow-dark t)
    (set-cursor-color "lightgreen")
    (set-face-foreground 'font-lock-builtin-face "lightgreen")
    (display-line-numbers-mode 1)
    (setq mode-line-format boich/default-mode-line-format))

  (defun boich/set-jblow-light-theme ()
    "JBlow's one theme that was a lighter."
    (interactive)
    (load-theme 'jblow-light t)
    (set-cursor-color "lightgreen")
    (set-face-foreground 'font-lock-builtin-face "lightgreen")
    (display-line-numbers-mode 1)
    (setq mode-line-format boich/default-mode-line-format))
#+end_src

* Modeline

#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :custom
    (doom-modeline-height 15 "set the height")
    (column-number-mode 1)
    (doom-modeline-battery t) ;; respects `display-battery-mode'.
    (doom-modeline-time t)    ;; respects `display-time-mode'.
    (doom-modeline-icon 1)
    :config
    (display-battery-mode 1)
    (display-time-mode 1))

  ;; To fix the modeline extending past the width of the window
  (doom-modeline-def-modeline 'main
    '(bar matches buffer-info remote-host buffer-position parrot selection-info)
    '(misc-info minor-modes checker input-method buffer-encoding
                major-mode process vcs "  ")) ; <-- added padding here
#+end_src

* Fonts

Custom font settings per face type.

=describe-face= will give you info of the face at the cursor.
Then you can customize it and it'll list all the options.

If you're having issues where Emacs is asking you for a Font directory on
startup - it is downloading the below fonts there (such as Nerd-Icons and
All-the-Icons). You're likely on Windows and need to manually install those
fonts. Go to whatever folder you chose and double click the main font file
(likely `all-the-icons.ttf` or `NFM.ttf`) to install it.

#+begin_src emacs-lisp
  (defun boich/set-font-face (face font size &optional weight)
    "Utility function to set font face if font exists."
    (when (find-font (font-spec :name font))
      (set-face-attribute face nil :font font :height size :weight (or weight 'medium))
      t))
#+end_src

** Default Font

Regular font settings.

#+begin_src emacs-lisp
  (defcustom boich/default-font-size 120
    "Default font size."
    :type 'number
    :group 'boich/interface)

  (defcustom boich/default-font "Fira Code"
    "Default font."
    :type 'string
    :group 'boich/interface)

  (defcustom boich/default-variable-pitch-font "Cantarell"
    "Default variable pitch font."
    :type 'string
    :group 'boich/interface)

  (defun boich/set-regular-font ()
    "Set the regular font."
    (interactive)
    (unless (boich/set-font-face 'default boich/default-font boich/default-font-size)
      (message "Warning: Font 'Fira Code' is not available."))
    (unless (boich/set-font-face 'fixed-pitch boich/default-font boich/default-font-size)
      (message "Warning: Font 'Fira Code' is not available for fixed-pitch."))
    (unless (boich/set-font-face 'variable-pitch boich/default-variable-pitch-font boich/default-font-size 'regular)
      (message "Warning: Font 'Cantarell' is not available for variable-pitch."))
    )

  (boich/set-regular-font)
#+end_src

** Programming Font

Custom font settings for programming buffers

Trying to get this working nicely and automatically per buffer was a
nightmare. So I'm just providing the functionality and I'll probably add a
toggle hotkey.

#+begin_src emacs-lisp
  (defcustom boich/programming-font-size 100
    "Programming font size."
    :type 'number
    :group 'boich/interface)

  (defcustom boich/programming-font "Cascadia Mono"
    "Programming font."
    :type 'string
    :group 'boich/interface)

  (defun boich/set-programming-font ()
    "Set the font for programming buffers."
    (interactive)
    (boich/set-font-face 'default boich/programming-font boich/programming-font-size))
#+end_src

** JBlow Fonts

#+begin_src emacs-lisp
  (defun boich/set-jblow-font-1 ()
    "Set the font to one of JBlow's fonts."
    (interactive)
    (boich/set-font-face 'default "Consolas" 120))

  (defun boich/set-jblow-font-2 ()
    "Set the font to one of JBlow's fonts."
    (interactive)
    (boich/set-font-face 'default "Anonymous Pro" 120))
#+end_src

* Icons

*** all-the-icons

#+begin_src emacs-lisp
  (use-package all-the-icons)

  (defun boich/all-the-icons-ensure-fonts-installed ()
    "Ensure that all-the-icons fonts are installed."
    (unless (find-font (font-spec :name "all-the-icons"))
      (all-the-icons-install-fonts t)))

  (boich/all-the-icons-ensure-fonts-installed)
#+end_src

*** nerd-icons

#+begin_src emacs-lisp
  (use-package nerd-icons)

  (defun boich/nerd-icons-ensure-installed ()
    "Ensure that nerd-icons fonts are installed."
    (unless (find-font (font-spec :name "Symbols Nerd Font Mono"))
      (nerd-icons-install-fonts t)))

  (boich/nerd-icons-ensure-installed)
#+end_src

* Line Numbers

#+begin_src emacs-lisp
  (global-display-line-numbers-mode)
  (setq display-line-numbers-type 'relative)

  (dolist (mode '(;; org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode -1))))
#+end_src

