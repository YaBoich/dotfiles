#+title: Completion, Navigation, and anything that should come out've the box
#+author: Charlie Verwer
#+date: 09/10/2023

* Ivy, Counsel, & Swiper Completion

#+begin_src emacs-lisp
  (use-package swiper)
  (use-package counsel)
  (use-package ivy
    :demand
    :bind(("C-f" . swiper)
	  ("M-x" . counsel-M-x)
	  ("C-x b" . counsel-ibuffer)
	  ("C-x C-f" . counsel-find-file)
	  :map minibuffer-local-map
	  ("C-r" . 'counsel-minibuffer-history)
	  :map ivy-minibuffer-map
	  ("TAB" . ivy-alt-done)
	  ("C-l" . ivy-alt-done)
	  ("C-j" . ivy-next-line)
	  ("C-k" . ivy-previous-line)
	  :map ivy-switch-buffer-map
	  ("C-k" . ivy-previous-line)
	  ("C-l" . ivy-done)
	  ("C-d" . ivy-switch-buffer-kill)
	  :map ivy-reverse-i-search-map
	  ("C-k" . ivy-previous-line)
	  ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1)
    (setq ivy-initial-inputs-alist nil)) ;; Don't start searches with ^

  (use-package ivy-rich
    :config
    (ivy-rich-mode 1))
#+end_src

* Which Key

A package that shows you options for a hotkey. For example if you hit C-c and
wait for the defined delay time below, a window will appear showing you your
options. Some options in the window:
- C-h j -> next page
- C-h q -> close

#+begin_src emacs-lisp
  (use-package which-key
    :demand
    :custom
    (which-key-idle-delay 0.1)
    :config
    (which-key-mode 1))
#+end_src

* Helpful

Helpful is a package that enriches the documentation provided when using ‘C-h f/v/k/b’.

Can also just M-x “^describe…” and see what else you can describe.

#+begin_src emacs-lisp
  (use-package helpful
    :ensure t
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src

* Avy Navigation (Ace Jump Mode)

NOTE: There is already an isearch (forward and back) bound to s-f and s-F. Try
that, too!

(Used to be something called [[https://github.com/winterTTr/ace-jump-mode/][Ace Jump Mode]])

This is an amazing way to navigate vertically and horizontally.

See [[https://github.com/abo-abo/avy][the github]]

There's also a reddit post [[https://www.reddit.com/r/emacs/comments/3e1ozx/acejumpmode_is_dead_long_live_avy/][here]] where people have put a few wonderful
nuggets of information. I learned there that:

evil-motion-state-map is a thing you can bind stuff to that will only apply
during a vim motion. So below 'p' will only be hotkeyed to that if you're in a
motion like 'dw'. So for example. You could do 'dpn (then hit the key ascociated
with "nuggets", above)' and it would delete everything from where you are up
until the word "nuggets".

#+begin_src emacs-lisp
  (use-package avy)
#+end_src

So now if I hit `evil-avy-goto-word-1' then type 1 letter, I can get to any word
on the screen by hitting the letters it shows next to them. That's pretty dam
amazing. Enjoy that shit and feel free to change the hotkey.

* Recent files

#+begin_src emacs-lisp
  (recentf-mode 1)
#+end_src

* Projectile

Project file searching and navigation.

#+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map))
;;     :init
;;     (when (file-directory-p "~/Projects/")
;;       (setq projectile-project-search-path '("~/Projects/")))
;;     (setq projectile-switch-project-action #'projectile-dired))

  ;; Install counsel-projectile
  (use-package counsel-projectile
    :config (counsel-projectile-mode))
#+end_src

* Desktop Save Mode

This is what we use. We can enable it by default, or manually save and load our
session data.

This shit is mega-annoying. If you run `desktop-read' by itself - it resets the
=desktop-dirname= variable to its default value. But you can run `(desktop-read
DIRNAME)' to make it use a specific directory.

Doing this manually is great. Just need to open correct windows first with evil.

#+begin_src emacs-lisp
  (defcustom boich/auto-load-session nil
    "Whether or not to auto-load our saved session data when we open emacs."
    :type 'boolean
    :group 'boich)

  (defcustom boich/auto-save-session nil
    "Whether or not to auto-save our session data when we quit emacs."
    :type 'boolean
    :group 'boich)

  (defun boich/load-session ()
    "Load the desktop session from `boich/desktop-save-dir`."
    (interactive)
    (desktop-read boich/desktop-save-dir))

  (defun boich/save-session ()
    "Save the desktop session to `boich/desktop-save-dir`."
    (interactive)
    (desktop-save boich/desktop-save-dir))

  ;; Conditionally load the desktop when.
  (when boich/auto-load-session
    (boich/load-session))

  ;; Conditionally save the desktop when exiting Emacs
  (add-hook 'kill-emacs-hook
            (lambda ()
              (when boich/auto-save-session
                (boich/save-session))))

  ;; Explicitly turn this off
  (desktop-save-mode 0)

  ;; We could also control what gets saved using something like:
  ;; (setq desktop-buffers-not-to-save (concat "\\(" "^nn\\.a[0-9]+\\|\\.log\\|(ftp)\\|^tags\\|^TAGS\\|\\.emacs.*\\|\\.diary\\|\\.newsrc-dribble\\|\\.bbdb\\)$"))
#+end_src

* Window Management Help (evil-window)

Here's a nice workflow tip. When you're using magit or something and a
horizontal buffer split happens, you can use 'C-w _' to make the buffer you're
on take up MOST of the screen. Here's a table of things for that kind've
situation:

NOTE: I've also created a transient keybind session thing using hyrda that lets
you adjust your window width/height.

|--------------------+---------+-------------------------------------------------|
| Situation          | Keybind | Description                                     |
|--------------------+---------+-------------------------------------------------|
| Horizontal split   | C-w _   | Make current window take up most of the screen  |
| Vertical split     | C-w     | Make current window take up most of the screen  |
| Any split          | C-w o   | Delete all windows except this one              |
| Any split          | C-w =   | Balance windows                                 |
|--------------------+---------+-------------------------------------------------|
| Manage window Size | SPC t w | Begins a hydra session to manage current window |
| -> (In session)    | h       | Shrink Width (vim style)                        |
| -> (In session)    | j       | Shrink Height (vim style)                       |
| -> (In session)    | k       | Increase Height (vim style)                     |
| -> (In session)    | l       | Increase Width (vim style)                      |
|--------------------+---------+-------------------------------------------------|

* Dired Customizations

We can adjust dired to change sorting order, what it displays, etc.

This should get it to show directories first, then files (all sorted lexographically).

The function `boich/toggle-dired-dotfiles will whether or not to display
dotfiles. It's bound to =C->= (C-S-.)

=(= is also a nice keybind in dired. It'll change the display mode.

#+begin_src emacs-lisp
  (setq dired-listing-switches "-al --group-directories-first")
#+end_src

If you want some help with dired, go into a dired buffer and hit up a `C-h m`.

#+begin_src emacs-lisp
  (defun boich/toggle-dired-dotfiles ()
    "Toggle showing dotfiles in Dired."
    (interactive)
    (if (string-match-p "-a" dired-actual-switches)
        (setq-local dired-actual-switches (replace-regexp-in-string "-a" "" dired-actual-switches))
      (setq-local dired-actual-switches (concat "-a" dired-actual-switches)))
    (revert-buffer))

  (define-key dired-mode-map (kbd "C->") 'boich/toggle-dired-dotfiles)
#+end_src
