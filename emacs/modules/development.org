#+title: Development Basics
#+author: Charlie Verwer
#+date: 10/10/2023

This video:
https://www.youtube.com/watch?v=iAjIoKqbmg8

* Company Completion

#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0.2
          company-minimum-prefix-length 1)
    (add-hook 'after-init-hook 'global-company-mode))
    #+end_src

* Treesitter

Comes installed with Emacs if included in the build (--with-tree-sitter).

I've done this and have put a symlink to the dynamic libraries (language
grammars) in my =$BIN= folder. These were built seperately.

#+begin_src emacs-lisp
  (setq treesit-extra-load-path
        (list (concat (getenv "BIN") "/tree-sitter-grammars/")))

  (require 'treesit)
  (treesit-available-p)
  (treesit-language-available-p 'python)
#+end_src

Can now use major modes with it. Such as: =python-ts-mode=

Run =M-x treesit-explore-mode= to view its inner workings.

Also something called `treesit-install-language-grammar' exists?

* Flymake

TODO

* Flycheck

On-the-fly syntax checking. I think this comes pre-installed with Emacs 29 and above.

#+begin_src emacs-lisp
  (use-package flycheck)
  ;;(add-hook 'prog-mode-hook 'flycheck-mode)
  (global-flycheck-mode)
#+end_src

* Eldoc

TODO

* Treemacs

Project file explorer tree.

#+begin_src emacs-lisp
  (use-package treemacs)
#+end_src

* Eglot

A note: Eglot sucks big fat donkey balls... Whereas LSP-mode just works. So I'm
going to use that!

Going through to docs: https://github.com/joaotavora/eglot

As of Emacs 29 (The version I'm using) this is built in.

Adding servers is done via the `eglot-server-programs' variable. Which doesn't
seem to exist! :D

I guess I'll just try run "eglot" in a code buffer.

* LSP Mode

Like Eglot, but not dogshit...

#+begin_src emacs-lisp
  ;; Install and configure lsp-mode as client for Language Server
  ;; Protocol (which is supported by csharp-language-server-protocol)
  (use-package lsp-mode
    :commands (lsp lsp-deferred))
    ;; :hook (prog-mode . lsp-deferred))

  ;; Install and configure lsp-ui
  (use-package lsp-ui
    :commands lsp-ui-mode
    :custom
    (lsp-ui-doc-enable nil))

  ;; Optional if you want lsp to manage your project packages
  (use-package lsp-treemacs)
#+end_src

** For individual languages

This function can be called for whatever programming mode you'd like to install
an LSP server for. For example:

=(add-hook 'csharp-mode-hook 'lsp-deferred)=
=(add-hook 'csharp-mode-hook 'boich/check-lsp-server)=

#+begin_src emacs-lisp
  (defun boich/check-lsp-server ()
    "Check if the LSP server is installed. If not, install it."
    (unless (file-exists-p lsp-server-install-dir)
      (lsp-install-server nil)))
#+end_src

* YAS Snippets

These work well with lsp-mode

You need to install your own snippets, such as:
- yasnippet-csharp: This is a collection of C# snippets for YASnippet with
  automatic namespace and classname insertion. You can find it on GitHub.
- yasnippet-snippets: This is the official collection of snippets for YASnippet,
  which includes snippets for many languages. If you've installed
  YASnippet-snippets, you should already have access to these.

#+begin_src emacs-lisp
  (use-package yasnippet)
  (use-package yasnippet-snippets)
;; (use-package yasnippet
;;   :ensure t
;;   :init
;;   (yas-global-mode 1))
;;
;; (use-package yasnippet-snippets
;;   :ensure t)
;;
;; ;; Optional: Use a custom directory for your snippets
;; (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
#+end_src

Could enable for all all modes:
```
    :config
    (yas-global-mode 1))
```

Or for programming modes only:
```
    (yas-reload-all)
    (add-hook 'csharp-mode-map 'yas-minor-mode)
    (add-hook 'prog-mode-hook 'yas-minor-mode)
```

* VTerm

#+begin_src emacs-lisp
  (defcustom boich/use-vterm t
    "Indicates whether or not you want to use vterm. Doesn't work well
    on Windows and need to install on Unix. Automatically sets to
    false via a prompt if answered 'no'."
    :type 'boolean
    :group 'boich)

  (defun prompt-for-vterm-installation ()
    "Prompt the user to install vterm."
    (when (and boich/use-vterm (not (featurep 'vterm)))
      (if (yes-or-no-p "vterm is not installed. Install vterm?")
          (progn
            (package-refresh-contents)
            (package-install 'vterm)
            (customize-save-variable 'boich/use-vterm t))
        ;; Change to nil if false so this doesn't prompt every time.
        ;; This persists the change to the custom variable.
        (customize-save-variable 'boich/use-vterm nil))))

  (message "Value of boich/use-vterm: %s" boich/use-vterm)


  ;; Check if vterm is installed/enabled and prompt the user
  (prompt-for-vterm-installation)

  ;; Load vterm if the user has agreed to use it
  (when boich/use-vterm
    (use-package vterm))
#+end_src

* Automatically pair parentheses

TODO this is causing issues when creating org babel blocks because it pairs:
- <el "> (THIS)"
  
#+begin_src emacs-lisp
;;  (electric-pair-mode t)
#+end_src

* Local VCS Change Indication

This shows me diffs within programming buffers.

I could also add diffs in dired and other modes, see below.

There are multiple modes you can use listed [[https://github.com/dgutov/diff-hl#about][here]]:
- =diff-hl-dired-mode= provides similar functionality in Dired.
- =diff-hl-margin-mode= changes the highlighting function to use the margin instead of the fringe.
- =diff-hl-amend-mode= sets the reference revision to the one before recent one. Also, you could use diff-hl-set-reference-rev to set it to any revision, see its docstring for details.
- =diff-hl-flydiff-mode= implements highlighting changes on the fly.
- =diff-hl-show-hunk-mouse-mode= makes fringe and margin react to mouse clicks to show the corresponding hunk. That's the alternative to using diff-hl-show-hunk and friends.

#+begin_src emacs-lisp
  (use-package diff-hl
    :config
    (diff-hl-margin-mode 1))

  ;; Enable `diff-hl' support by default in programming buffers
  (add-hook 'prog-mode-hook #'diff-hl-mode)
#+end_src

* Whitespace Mode

If you copy and paste things you can sometimes get a *zero-width whitespace*. These are the most annoying things that exist. Whitespace mode helps you identify stuff like this.

You can enable this by running =(whitespace-mode)=. It'll show those zero-width whitespaces as diamonds.

#+begin_src emacs-lisp
  (require 'whitespace)

  ;; Add the zero-width space to the whitespace-style
  (setq whitespace-style '(face tabs spaces trailing lines space-before-tab
                                newline indentation empty space-after-tab
                                space-mark tab-mark newline-mark))

  ;; Add the zero-width space to the display mappings
  (setq whitespace-display-mappings
        '(
          ;; (space-mark ?\u200B [?·]) ; display zero-width space as middle dot
          (space-mark ?\u200B [?◊]) ; display zero-width space as diamond
          (newline-mark ?\n [?\u00B6 ?\n]) ; end-of-line
          (tab-mark ?\t [?\u00BB ?\t] [?\\ ?\t]) ; tab
          ))
#+end_src

* Git

#+begin_src emacs-lisp
  (use-package magit
    :custom
    ;; Commit message fill column (72 is conventional width)
    (git-commit-fill-column 72)
    ;; Auto revert mode (auto-refresh the status buffer, but not other magit buffers)
    (magit-auto-revert-mode t)
    ;; Show refined hunks during diff (shows word-granularity changes)
    (magit-diff-refine-hunk t)

    :config
    ;; Use full screen for magit-status, restoring previous window config on quit
    (setq magit-status-buffer-switch-function 'switch-to-buffer)

    (defun magit-fullscreen-advice (orig-fun &rest args)
      (window-configuration-to-register :magit-fullscreen)
      (apply orig-fun args)
      (delete-other-windows))

    (defun magit-restore-screen-advice (orig-fun &rest args)
      (window-configuration-to-register :quit-magit)
      (apply orig-fun args)
      (jump-to-register :magit-fullscreen))

    (advice-add 'magit-status :around #'magit-fullscreen-advice)
    (advice-add 'magit-quit-window :around #'magit-restore-screen-advice)

    ;; Integrate with `which-key` if you have it to show magit-dispatch-popup key hints
    (when (boundp 'which-key-mode)
      (add-hook 'magit-mode-hook 'which-key-mode)))
#+end_src

** Help

Below are some of the most common/useful keybinds for the main features of Magit.

*** Staging individual chunks/lines of code

So say you have 10 lines of code changed in the same chunk in Magit, you want to
stage the first 5 and stash the last 5. Here's what you do.

- Using a mark in emacs, select the region you want to stage. Then hit "s". This
  is not the same as selecting with "v" in vim/evil. The command for this is
  `set-mark-command', bound to "C-@" in this setup for some reason.
- Now you can hit z to stash the unstaged changes. Pretty cool...

TODO - if you ever see this again, learn a bit about marks in emacs and what
other cool things they can be used for.

*** Staging chunks/lines of an untracked file

Since an untracked file doesn't show up in the "Unstaged changes" section. You
can't use the above method. Instead, what you need to do is to use the
"--intent-to-add" option (default hotkey in this setup is "I" -
`evil-collection-magit-stage-untracked-file-with-intent')

Now it will show as a new file in "Staged changes", and its diff will be in
"Unstaged changes". This is very cool.

*** magit-status (SPC g s)

This is the primary Magit interface, where you can see the status of your repository.

|---------+-----------------------------------------------------------------------|
| Keybind | Function                                                              |
|---------+-----------------------------------------------------------------------|
| s       | Stage the file under point or the region.                             |
| u       | Unstage the file under point or the region.                           |
| c c     | Commit the staged changes (finalize with C-c C-c in the mini-buffer). |
| F F     | Pull from the remote repository.                                      |
| P P     | Push to the remote repository.                                        |
| d d     | Diff unstaged changes.                                                |
| D D     | Diff committed changes.                                               |
| l l     | View the log (commit history).                                        |
| b b     | Switch branches.                                                      |
| x       | Discard changes in the file under point or the region.                |
| TAB     | Toggle visibility of diff for a file or commit details.               |
|---------+-----------------------------------------------------------------------|

*** magit-dispatch (SPC g d)

This brings up a pop-up window with a list of Magit commands you can execute, providing a quick access to various Magit commands.

|---------+----------------|
| Keybind | Function       |
|---------+----------------|
| l       | Log pop-up.    |
| d       | Diff pop-up.   |
| f       | Fetch pop-up.  |
| P       | Push pop-up.   |
| F       | Pull pop-up.   |
| b       | Branch pop-up. |
| m       | Merge pop-up.  |
|---------+----------------|

*** magit-file-dispatch (SPC g f)

This is a pop-up specifically for actions related to files.

|---------+---------------------------|
| Keybind | Function                  |
|---------+---------------------------|
| s       | Stage the current file.   |
| u       | Unstage the current file. |
| d       | Diff the current file.    |
|---------+---------------------------|
